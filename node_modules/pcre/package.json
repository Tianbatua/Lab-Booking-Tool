{
  "name": "pcre",
  "version": "0.0.5",
  "author": {
    "name": "Brian White",
    "email": "mscdex@mscdex.net"
  },
  "description": "A pcre binding for node.js",
  "main": "./lib/pcre",
  "engines": {
    "node": ">=0.8.0"
  },
  "keywords": [
    "pcre",
    "regex",
    "perl",
    "libpcre",
    "regexp"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/mscdex/node-pcre/raw/master/LICENSE"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/mscdex/node-pcre.git"
  },
  "scripts": {
    "install": "node-gyp rebuild"
  },
  "gypfile": true,
  "readme": "Description\n===========\n\nA pcre binding for [node.js](http://nodejs.org/) with UTF8 and Unicode properties support.\n\n\nRequirements\n============\n\n* [node.js](http://nodejs.org/) -- v0.8.0 or newer\n* Windows, Linux, or OSX\n  * BSD or OpenSolaris support is possible -- just need to generate and submit a config.h for [PCRE 8.32](ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.32.tar.gz) with these options:\n```\n./configure --enable-utf8 --enable-unicode-properties --enable-static --disable-shared --enable-jit --disable-cpp --enable-pcre8 --disable-pcre16 --disable-pcre32\n```\n\n\nInstall\n=======\n\n    npm install pcre\n\n\nExamples\n========\n\n* Simple one-off regexp execution:\n\n```javascript\nvar inspect = require('util').inspect;\nvar PCRE = require('pcre').PCRE;\n\nconsole.log(inspect(PCRE.exec(\"(?<nodejsrules>o)\", \"foo\", 0), false, Infinity));\n\n// output:\n// [ 1, 2, 1, 2, named: { nodejsrules: [ 1, 2 ] } ]\n```\n\n* Simple one-off regexp execution returning all matches:\n\n```javascript\nvar inspect = require('util').inspect;\nvar PCRE = require('pcre').PCRE;\n\nconsole.log(inspect(PCRE.execAll(\"(?<nodejsrules>o)\", \"foo\", 0), false, Infinity));\n\n// output:\n// [ [ 1, 2, 1, 2, named: { nodejsrules: [ 1, 2 ] } ],\n//   [ 2, 3, 2, 3, named: { nodejsrules: [ 2, 3 ] } ] ]\n```\n\n* Instantiate a regexp and test it:\n\n```javascript\nvar PCRE = require('pcre').PCRE;\n\nvar re = new PCRE(\"o\");\nconsole.log(re.test(\"foo\", 0));\nconsole.log(re.test(\"bar\", 0));\nconsole.log(re.test(\"node.js rules\", 2));\n\n// output:\n// true\n// false\n// false\n```\n\n* Instantiate a regexp, JIT compile it, and execute it, returning all matches:\n\n```javascript\nvar inspect = require('util').inspect;\nvar PCRE = require('pcre').PCRE;\n\nvar re = new PCRE(\"o\");\nre.study(PCRE.PCRE_STUDY_JIT_COMPILE);\nconsole.log(inspect(re.execAll(\"fooooo\", 0), false, Infinity));\n\n// output:\n// [ [ 1, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ], [ 5, 6 ] ]\n```\n\n\nAPI\n===\n\nPCRE static constants\n---------------------\n\nAll static constants for regexp flags/options and errors can be found in `lib/pcre.js`.\n\n\nPCRE static methods\n-------------------\n\n* **exec**(< _string_ >pattern, < _mixed_ >subject, < _integer_ >offset[, < _integer_ >flags]) - _mixed_ - Compiles `pattern` and executes it on `subject` starting at `offset` in `subject`. `subject` can be a _string_ or _Buffer_. The return value is either _null_ in case of no match, an _integer_ error code in case of error, or an _array_ on success containing offsets in the `subject` for the first match. The first two offsets reference the entirety of the matched part of the `subject`. Any additional offsets reference capture groups in order from left to right. Offsets for named capture groups are additionally available on the `named` object.\n\n* **execAll**(< _string_ >pattern, < _mixed_ >subject, < _integer_ >offset[, < _integer_ >flags]) - _mixed_ - Same as exec() except an _array_ of _array_ matches is returned on success.\n\n* **test**(< _string_ >pattern, < _mixed_ >subject, < _integer_ >offset[, < _integer_ >flags]) - _boolean_ - Similar to exec(), but used merely to test if `pattern` matches at least once.\n\n* **version**() - _string_ - Returns the version and date of the PCRE library used (e.g. \"8.32 2012-11-30\").\n\n\nPCRE methods\n------------\n\n* **(constructor)**(< _string_ >pattern[, < _integer_ >flags]) - Compiles `pattern` and returns a new PCRE instance.\n\n* **study**([< _integer_ >flags][, < _integer_ >jitStackStart=1, < _integer_ >jitStackMax=32KB]) - _boolean_ - Performs some analysis of the compiled regexp in order to optimize it. `jitStackStart` and `jitStackMax` are custom starting and maximum JIT stack sizes (in bytes) respectively for when one of the JIT flags are passed in. The return value indicates the success of the analysis.\n\n* **set**(< _string_ >pattern[, < _integer_ >flags]) - _(void)_ - Compiles a new `pattern` and replaces the existing regexp.\n\n* **save**() - _Buffer_ - Returns the internal state object representing the compiled regexp. Note: this does not save the result of any previous optimizations performed by study().\n\n* **load**(< _Buffer_ >state) - _(void)_ - Loads previously saved internal state data from save().\n\n* **exec**(< _mixed_ >subject, < _integer_ >offset[, < _integer_ >flags]) - _mixed_ - Similar to PCRE.exec().\n\n* **execAll**(< _mixed_ >subject, < _integer_ >offset[, < _integer_ >flags]) - _mixed_ - Same as exec() except an _array_ of _array_ matches is returned on success.\n\n* **test**(< _mixed_ >subject, < _integer_ >offset[, < _integer_ >flags]) - _boolean_ - Similar to exec(), but used merely to test if `pattern` matches at least once.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mscdex/node-pcre/issues"
  },
  "homepage": "https://github.com/mscdex/node-pcre",
  "_id": "pcre@0.0.5",
  "_from": "pcre@"
}
