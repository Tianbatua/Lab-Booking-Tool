{
  "name": "passport-userapp",
  "version": "1.1.2",
  "description": "Password and token authentication strategy using UserApp for Passport",
  "homepage": "https://github.com/userapp-io/passport-userapp",
  "author": {
    "name": "Timothy E. Johansson",
    "email": "timothy.johansson@userapp.io"
  },
  "company": {
    "name": "UserApp",
    "product": "UserApp",
    "homepage": "https://www.userapp.io/"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/userapp-io/passport-userapp.git"
  },
  "main": "./lib/passport-userapp",
  "dependencies": {
    "passport": ">= 0.1.1",
    "userapp": ">= 0.2.3"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "keywords": [
    "passport",
    "userapp",
    "user",
    "user management",
    "auth",
    "authentication",
    "identity"
  ],
  "readme": "# Passport-UserApp\n\nPassword and token authentication strategy using [UserApp](https://www.userapp.io) for [Passport](http://passportjs.org/).\n\n*UserApp is a cloud-based user management API for web apps with the purpose to relieve developers from having to program logic for user authentication, sign-up, invoicing, feature/property/permission management, and more.*\n\nThis module lets you authenticate using either a username and password or a session token in your Node.js\napplications. By plugging into Passport, UserApp authentication can be easily and\nunobtrusively integrated into any application or framework that supports\n[Connect](http://www.senchalabs.org/connect/)-style middleware, including\n[Express](http://expressjs.com/).\n\n## Installation\n\n    $ npm install passport-userapp\n\n## Usage\n\n#### Configure Strategy\n\nThe userapp authentication strategy authenticates users using either a username and\npassword or a session token via a REST call to UserApp. The strategy requires a `verify` callback, which accepts these\ncredentials and calls `done` providing a user. To be able to use this strategy, you need a [UserApp account](https://app.userapp.io/#/sign-up/), with an [App Id](https://help.userapp.io/customer/portal/articles/1322336-how-do-i-find-my-app-id-).\n\n```javascript\npassport.use(new UserAppStrategy({\n        appId: 'YOU-USERAPP-APP-ID'\n    },\n    function (userprofile, done) {\n        Users.findOrCreate(userprofile, function(err,user) {\n            if(err) return done(err);\n                return done(null, user);\n            });\n        }\n    ));\n```\n\n#### Authenticate Requests Using Username/Password\n\nUse `passport.authenticate()`, specifying the `'userapp'` strategy, to\nauthenticate requests using a username and password. The username and password should be sent as POST parameters with the request.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n```javascript\napp.post('/login', \n    passport.authenticate('userapp', { failureRedirect: '/login' }),\n    function(req, res) {\n        res.redirect('/');\n    });\n```\n\n**Stateless Server Sessions**\n\nTo make your server stateless (i.e. you could restart your server without logging out your users), just save the UserApp session token in a cookie named `ua_session_token`:\n\n```javascript\napp.post('/login', \n    passport.authenticate('userapp', { failureRedirect: '/login' }),\n    function(req, res) {\n        res.cookie('ua_session_token', req.user.token);\n        res.redirect('/');\n    });\n```\n\nDon't forget to delete it when logging out:\n\n```javascript\napp.get('/logout', function (req, res) {\n    req.logout();\n    res.clearCookie('ua_session_token');\n    res.redirect('/');\n});\n```\n\nAnd to protect your routes, use the `passport.authenticate()` method, like this:\n\n```javascript\napp.get('/account', \n    passport.authenticate('userapp', { failureRedirect: '/login' }), \n    function (req, res) {\n        res.render('account', { user:req.user });\n    });\n```\n\n#### Authenticate Requests Using a Session Token\n\nUse `passport.authenticate()`, specifying the `'userapp'` strategy, to\nauthenticate requests using a session token. The token should be sent as a cookie named `ua_session_token` (automatically set by the front-end integrations such as the [AngularJS module](https://github.com/userapp-io/userapp-angular)).\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n```javascript\napp.post('/api/call', passport.authenticate('userapp'),\n    function(req, res) {\n        // Return some relevant data, for example the logged in user, articles, etc.\n        res.send({ user: req.user });\n    });\n```\n\n#### Authenticate Requests Using HTTP Basic Authentication\n\nUse `passport.authenticate()`, specifying the `'userapp'` strategy, to\nauthenticate requests using HTTP Basic Authentication. It can be used in two ways; 1) with a username and password, or 2) by leaving username empty and setting password to a token.\n\n#### User Profile\n\nThe user profile follows the [Passport Profile Schema](http://passportjs.org/guide/profile/) when available. Some fields are added to contain all information from the [UserApp User entity](https://app.userapp.io/#/docs/user/#properties).\n\n```javascript\n{\n    provider: 'userapp',\n    id: 'user_id',\n    username: 'login',\n    name: { familyName: 'last_name', givenName: 'first_name' },\n    email: 'email',\n    emails: [ { value: 'email' } ],\n    permissions: { permissionName: { value: boolean, override: boolean } },\n    features: { featureName: { value: boolean, override: boolean } },\n    properties: { propertyName: { value: mixed, override: boolean } },\n    subscription: { price_list_id: 'string', plan_id: 'string', override: boolean },\n    lastLoginAt: unix_timestamp,\n    updatedAt: unix_timestamp,\n    createdAt: unix_timestamp,\n    token: 'session token',\n    _raw: { /* raw UserApp User profile */ }\n}\n```\n    \nPlease note that when working with the [UserApp API](https://app.userapp.io/#/docs/), you will need to create a new user object according to the [User entity](https://app.userapp.io/#/docs/user/#properties). For example `username` => `login`.\n\n## Examples\n\nFor a complete, working example, refer to the [login example](https://github.com/userapp-io/passport-userapp/tree/master/examples/login) or the [signup-login example](https://github.com/userapp-io/passport-userapp/tree/master/examples/signup-login).\n\nFor an example using AngularJS as front-end, refer to the [AngularJS example](https://github.com/userapp-io/passport-userapp/tree/master/examples/angularjs).\n\nFor an example with stateless sessions, refer to the [stateless-login example](https://github.com/userapp-io/passport-userapp/tree/master/examples/stateless-login).\n\nFor an example with HTTP Basic Authentication, refer to the [http-basic-auth example](https://github.com/userapp-io/passport-userapp/tree/master/examples/http-basic-auth).\n\n## Related Modules\n\n- [userapp-nodejs](https://github.com/userapp-io/userapp-nodejs) â€” Node.js client for accessing the UserApp API\n\n## Help\n\nContact us via email at support@userapp.io or visit our [support center](https://help.userapp.io).\n\n## Credits\n\n  - [Timothy E. Johansson](https://github.com/timothyej)\n  - [Charlton Roberts](https://github.com/charltoons)\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2014 UserApp\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/userapp-io/passport-userapp/issues"
  },
  "_id": "passport-userapp@1.1.2",
  "dist": {
    "shasum": "6cf60b60e794510e770960085654d9704fb4c668"
  },
  "_from": "passport-userapp@",
  "_resolved": "https://registry.npmjs.org/passport-userapp/-/passport-userapp-1.1.2.tgz"
}
