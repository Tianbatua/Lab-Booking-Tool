{
  "name": "simple-ssh",
  "version": "0.7.2",
  "description": "A wrapper for ssh2 to make it easier to perform commands over SSH",
  "keywords": [
    "ssh",
    "ssh2"
  ],
  "author": {
    "name": "Mike Cluck",
    "email": "mcluck90@gmail.com"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/MCluck90/simple-ssh/blob/master/LICENSE.txt"
    }
  ],
  "main": "./lib/ssh.js",
  "repository": {
    "type": "git",
    "url": "http://github.com/MCluck90/simple-ssh.git"
  },
  "devDependencies": {
    "expect.js": "~0.2.0",
    "grunt-contrib-watch": "~0.4.4",
    "grunt-simple-mocha": "~0.4.0",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.0"
  },
  "dependencies": {
    "xtend": "~2.0.6",
    "ssh2": "~0.2.10"
  },
  "readme": "# simple-ssh\n\nA wrapper for the [ssh2 client module by Brian White][1] which makes it easier to run a sequence of commands over SSH.\n\n# Requirements\n\n* [node.js][2] -- v0.8.7 or newer\n\n# Install\n\n    npm install simple-ssh\n\n# Examples\n\n* Echoing out a users `PATH`:\n\n```javascript\nvar SSH = require('simple-ssh');\n\nvar ssh = new SSH({\n    host: 'localhost',\n    user: 'username',\n    pass: 'password'\n});\n\nssh.exec('echo $PATH', {\n    out: function(stdout) {\n        console.log(stdout);\n    }\n}).start();\n\n/*** Using the `args` options instead ***/\nssh.exec('echo', {\n    args: ['$PATH'],\n    out: function(stdout) {\n        console.log(stdout);\n    }\n}).start();\n```\n\n* Capturing error output:\n\n```javascript\nssh.exec('this-does-not-exist', {\n    err: function(stderr) {\n        console.log(stderr); // this-does-not-exist: command not found\n    }\n}).start();\n```\n\n* Capturing error codes:\n\n```javascript\nssh.exec('exit 69', {\n    exit: function(code) {\n        console.log(code); // 69\n    }\n}).start();\n```\n\n* Chaining commands together:\n\n```javascript\nssh\n    .exec('echo \"Node.js\"', {\n        out: console.log\n    })\n    .exec('echo \"is\"', {\n        out: console.log\n    })\n    .exec('echo \"awesome!\"', {\n        out: console.log\n    })\n    .start();\n\n// Output:\n// Node.js\n// is\n// awesome!\n```\n\n* Get the number of commands:\n\n```javascript\nssh\n    .exec('exit 1')\n    .exec('exit 2')\n    .exec('exit 3');\n\nconsole.log(ssh.count()); // 3\n```\n\n* Running a command using `sudo`\n\n```javascript\nssh.exec('sudo echo \"Pseudo-sudo\"', {\n    pty: true,\n    out: console.log\n}).start();\n```\n\n* Resetting a connection and the commands\n\n```javascript\n// Echos out any messages the user sent in if 10 or more have been queued\nvar msgInterval = setInterval(function() {\n    if (ssh.count() > 10) {\n        ssh.start();\n    }\n}, 1000);\n\nsocket.on('message', function(msg) {\n    // If a 'reset' message is received, clear previous messages\n    if (msg === 'reset') {\n        ssh.reset(function(err) {\n            if (err) {\n                throw err;\n            }\n\n            ssh.exec('echo \"reset\"');\n        });\n    } else {\n        ssh.exec('echo \"' + msg + '\"');\n    }\n});\n```\n\n----------\n\n# API\n\n### Functions\n\n* **Constructor**( [ _config_ ] )\n    * **config** { _Object_ }:\n        * **config.host** {  _String_ }: Hostname\n        * **config.port** { _Number_ }: Port number (default: `22`)\n        * **config.user** { _String_ }: Username\n        * **config.pass** { _String_ }: Password\n* **exec**( _command_, [ _options_ ] ): **Adds a command to the stack**\n    * **command** { _String_ }: Command to be executed\n    * **options** { _Object_ }:\n        * **options.args** { _String[]_ }: Additional command line arguments (default: `null`)\n        * **options.out** { _Function( stdout )_ }: `stdout` handler\n            * **stdout** { _String_ }: Output streamed through `stdout`\n        * **options.err** { _Function( stderr )_ }: `stderr` handler\n            * **stderr** { _String_ }: Output streamed through `stderr`\n        * **options.exit** { _Function( code, stdout, stderr )_ }: Exit handler\n            * **code** { _Number_ }: Exit code\n            * **stdout** { _String_ }: All of the standard output concatenated together\n            * **stderr** { _String_ }: All of the error output concatenated together\n        * **options.pty** { _Boolean_ }: Allocates a pseudo-tty, useful for command which require `sudo` (default: `false`)\n* **start**( [ _options_ ] ): **Starts executing the commands**\n    * **options** { _Object_ }:\n        * **options.success** { _Function()_ }: Called on successful connection\n        * **options.fail** { _Function( err )_ }: Called if the connection failed\n            * **err** { _Error_ }: Error information\n* **reset**( [ _callback_ ] ): **Clears the command queue and resets the current connection**\n    * **callback** { _Function( err )_ }: Called when the connection has been successfully reset\n        * **err** { _Error_ }: Error information\n* **end**(): **Ends the SSH session** (this is automatically called at the end of a command queue).\n\n### Flow Control\n\nSometimes you may find yourself needing to change which commands are executed. The flow can be changed by returning `false` from an `exit` handler.\n\n**Note**: This only works if `false` is explicitly returned. \"Falsy\" values are not sufficient (since `undefined` is implicitly returned and it's \"falsy\").\n\n* Ending prematurely:\n\n```javascript\nssh\n    .exec('pwd', {\n        exit: function() {\n            return false;\n        }\n    })\n    .exec('echo \"Not executed\"')\n    .start();\n```\n\n* Running a new queue of commands:\n\n```javascript\nssh\n    .exec('exit', {\n        args: [ Math.round(Math.random()) ],\n        exit: function(code) {\n            if (code === 1) {\n                // Setup the new command queue\n                ssh.exec('echo \"new queue\"');\n                return false;\n            }\n        }\n    })\n    .exec('exit 0', {\n        exit: function() {\n            console.log('Previous command did not return false');\n        }\n    })\n    .start();\n```\n\n  [1]: https://github.com/mscdex/ssh2\n  [2]: http://nodejs.org",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/MCluck90/simple-ssh/issues"
  },
  "_id": "simple-ssh@0.7.2",
  "_from": "simple-ssh@"
}
