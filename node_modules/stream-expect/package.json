{
  "name": "stream-expect",
  "version": "0.1.0",
  "description": "Interact with streams using expect",
  "main": "./index.js",
  "scripts": {
    "test": "mocha -R dot"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/rsolomo/node-stream-expect.git"
  },
  "keywords": [
    "expect",
    "stream"
  ],
  "author": {
    "name": "Ray Solomon",
    "email": "raybsolomon@gmail.com"
  },
  "license": "MIT",
  "devDependencies": {
    "mocha": "~1.7.4",
    "sinon": "~1.5.2"
  },
  "readme": "[![Build Status](https://travis-ci.org/rsolomo/node-stream-expect.png?branch=master)](https://travis-ci.org/rsolomo/node-stream-expect)\n\n# node-stream-expect\n\nstream-expect is a tool for controlling interactive streams.\n\n## Installation\n\n```shell\n$ npm install stream-expect\n```\n## Usage\n\nCheckout the [examples](https://github.com/rsolomo/node-stream-expect/tree/master/examples) for some sample usage.\n\n### expect.createExpect(ReadStream, WriteStream, [options])\n\nReturns a new Expect object.\n\n- `ReadStream` - Object - A readable stream\n- `WriteStream` - Object - A writeable stream\n- `options` - Object\n  - timeout - Number - Sets how long to wait before timing out, defaults to 10000\n\n---\n### expect.createExpect(DuplexStream, [options])\n\nSimilar to above, but stream is both readable and writeable.\n\n---\n### expect.spawn(command, [args], [options])\n\nConvenience method for spawning a process, creating an Expect object, \nand using stdin and stdout for the read and write streams.\n\nIn other words this:\n\n```javascript\nvar child = require('child_process').spawn(command)\nvar exp = expect.createExpect(child.stdin, child.stdout)\n```\n\nCould optionally be replaced with this:\n\n```javascript\nvar exp = expect.spawn(command)\n```\n\n---\n### .expect(regex, callback)\nWatch stream for data matching regex. Here are the callback's arguments:\n\n- `err` - Error|null - An error object will be returned if expect times out\n- `output` - String - The output of the stream since method was called\n- `match` - Array - The results of the successful regex\n \nIt's worth noting that regex matches will be non-greedy.\n\n---\n### .send(string)\nWrite to the writeable stream\n\n## License\nMIT",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/rsolomo/node-stream-expect/issues"
  },
  "_id": "stream-expect@0.1.0",
  "dist": {
    "shasum": "035f6f509b576a588a7d6371e7d62faef89aa7d6"
  },
  "_from": "stream-expect@",
  "_resolved": "https://registry.npmjs.org/stream-expect/-/stream-expect-0.1.0.tgz"
}
